#!/usr/bin/env groovy

def actions

pipeline {
    agent {
        label 'docker'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Prepare') {
            steps {
                dir ('results') {
                    deleteDir()
                }
                script {
                    actions = load 'sources/tests/actions.groovy'
                    actions.prepareSources('nexus.enalean.com_readonly')
                }
            }
        }

        stage('Check lockfiles') {
            steps { script {
                actions.runFilesStatusChangesDetection('lockfiles', 'package-lock.json composer.lock')
            } }
            post {
                failure {
                    dir ('sources') {
                        sh 'git diff'
                    }
                }
            }
        }

        stage('Tests') {
            failFast false
            parallel {
                stage('UT SimpleTest PHP 7.2') {
                    steps { script { actions.runSimpleTestTests('72') } }
                    post { always { junit 'results/ut-simpletest/php-72/results.xml' } }
                }
                stage('UT PHPUnit') {
                    stages {
                        stage('UT PHPUnit PHP 7.2') {
                            steps { script { actions.runPHPUnitTests('72') } }
                            post {
                                always {
                                    step([$class: 'CloverPublisher', cloverReportDir: 'results/ut-phpunit/php-72/coverage/', cloverReportFileName: 'clover.xml'])
                                }
                            }
                        }
                    }
                    post { always { junit 'results/ut-phpunit/*/phpunit_tests_results.xml' } }
                }
                stage ('Karma') {
                    stages {
                        stage('Karma AgileDashboard PlanningV2') {
                            steps { script { actions.runKarmaTests('planning', 'plugins/agiledashboard/www/js/planning-v2') } }
                        }
                        stage('Karma AgileDashboard Kanban') {
                            steps { script { actions.runKarmaTests('kanban', 'plugins/agiledashboard/www/js/kanban') } }
                        }
                        stage('Karma Tracker') {
                            steps { script { actions.runKarmaTests('tracker', 'plugins/tracker/www/scripts') } }
                        }
                        stage('Karma FRS plugin') {
                            steps { script { actions.runKarmaTests('frs', 'plugins/frs/www/js/angular') } }
                        }
                        stage('Karma Label plugin') {
                            steps { script { actions.runKarmaTests('label', 'plugins/label/www/scripts') } }
                        }
                        stage('Karma PullRequest plugin') {
                            steps { script { actions.runKarmaTests('pullrequest', 'plugins/pullrequest/www/scripts') } }
                        }
                        stage('Karma CrossTracker plugin') {
                            steps { script { actions.runKarmaTests('crosstracker', 'plugins/crosstracker/scripts') } }
                        }
                        stage('Karma TimeTracking plugin') {
                            steps { script { actions.runKarmaTests('timetracking', 'plugins/timetracking/www/scripts') } }
                        }
                        stage('Karma Git plugin') {
                            steps { script { actions.runKarmaTests('git', 'plugins/git/www/scripts') } }
                        }
                        stage('Karma Document plugin') {
                            steps { script { actions.runKarmaTests('document', 'plugins/document/scripts') } }
                        }
                    }
                    post { always { junit 'results/karma/test-*-results.xml' } }
                }
                stage('REST') {
                    stages {
                        stage('REST CentOS 6 PHP 7.2 MySQL 5.7') {
                            steps { script { actions.runRESTTests('c6-php72-mysql57') } }
                        }
                    }
                    post { always { junit 'results/api-rest/*/rest_tests.xml' } }
                }
                stage('SOAP') {
                    stages {
                        stage('SOAP PHP 7.2') { steps { script { actions.runSOAPTests('php-72', '4') } } }
                    }
                    post { always { junit "results/api-soap/*/soap_tests.xml" } }
                }
                stage('Build and run CentOS 6') { steps { script { actions.runBuildAndRun('centos6') } } }
                stage('Build and run CentOS 7') { steps { script { actions.runBuildAndRun('centos7') } } }
                stage('Code conformity') {
                    stages {
                        stage('Check translation files') {
                            steps { script {
                                actions.runFilesStatusChangesDetection('translation files', '"*.po\$"')
                            } }
                        }
                        stage('Javascript coding standards') {
                            steps { script { actions.runJavascriptCodingStandards() } } }
                    }
                }
            }
            post {
                always {
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'results/'
                }
            }
        }
    }
}
