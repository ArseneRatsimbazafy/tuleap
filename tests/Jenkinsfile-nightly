#!/usr/bin/env groovy

def actions

pipeline {
    agent {
        label 'docker'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Prepare') {
            steps {
                dir ('results') {
                    deleteDir()
                }
                script {
                    actions = load 'sources/tests/actions.groovy'
                    actions.prepareSources('nexus.enalean.com_readonly')
                }
            }
        }

        stage('Tests') {
            failFast false
            parallel {
                stage ('PHP 7.3') {
                    stages {
                        stage('UT PHPUnit PHP 7.3') {
                            steps { script { actions.runPHPUnitTests('73') } }
                            post {
                                always {
                                    junit 'results/ut-phpunit/*/phpunit_tests_results.xml'
                                    step([$class: 'CloverPublisher', cloverReportDir: 'results/ut-phpunit/php-73/coverage/', cloverReportFileName: 'clover.xml'])
                                }
                            }
                        }
                        stage('UT SimpleTest PHP 7.3') {
                            steps { script { actions.runSimpleTestTests('73') } }
                            post { always { junit 'results/ut-simpletest/php-73/results.xml' } }
                        }
                        stage('REST CentOS 6 PHP 7.3') {
                            steps { script { actions.runRESTTests('c6-php73-mysql57') } }
                            post { always { junit 'results/api-rest/*/rest_tests.xml' } }
                        }
                        stage ('SOAP PHP 7.3') {
                            steps { script { actions.runSOAPTests('php-73', '5') } }
                            post { always { junit "results/api-soap/*/soap_tests.xml" } }
                        }
                    }
                }
                stage ('PHP 7.4') {
                    stages {
                        stage('UT PHPUnit PHP 7.4') {
                            steps { script { actions.runPHPUnitTests('74') } }
                            post {
                                always {
                                    junit 'results/ut-phpunit/*/phpunit_tests_results.xml'
                                    step([$class: 'CloverPublisher', cloverReportDir: 'results/ut-phpunit/php-74/coverage/', cloverReportFileName: 'clover.xml'])
                                }
                            }
                        }
                    }
                }
                stage('E2E tests') {
                    options { retry(1) }
                    steps {
                        script { actions.runEndToEndTests('full') }
                        junit 'results/e2e/full/*.xml'
                    }
                }
                stage('Distributed SVN integration') {
                    options { retry(1) }
                    steps {
                        script { actions.runEndToEndTests('distlp') }
                        junit 'results/e2e/distlp/*.xml'
                    }
                }
                stage('Psalm static analysis') {
                    agent {
                        dockerfile {
                            dir 'sources/tests/psalm/'
                            reuseNode true
                            args '--network none'
                        }
                    }
                    steps {
                        script {
                            actions.runPsalm('tests/psalm/psalm.xml', '')
                        }
                    }
                    post { always { recordIssues enabledForFailure: true, minimumSeverity: 'NORMAL', tools: [checkStyle(pattern: 'results/psalm/checkstyle.xml')] } }
                }
            }
            post {
                always {
                    archiveArtifacts allowEmptyArchive: true, artifacts: 'results/'
                }
                failure {
                    withCredentials([string(credentialsId: 'email-notification-rd-team', variable: 'email')]) {
                        mail to: email,
                        subject: "${currentBuild.fullDisplayName} is broken",
                        body: "See ${env.BUILD_URL}"
                    }
                }
                unstable {
                    withCredentials([string(credentialsId: 'email-notification-rd-team', variable: 'email')]) {
                        mail to: email,
                        subject: "${currentBuild.fullDisplayName} is unstable",
                        body: "See ${env.BUILD_URL}"
                    }
                }
            }
        }
    }
}
